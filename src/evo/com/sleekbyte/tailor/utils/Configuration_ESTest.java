/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 10 02:51:01 GMT 2024
 */

package com.sleekbyte.tailor.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sleekbyte.tailor.common.ColorSettings;
import com.sleekbyte.tailor.common.ConstructLengths;
import com.sleekbyte.tailor.common.Rules;
import com.sleekbyte.tailor.common.Severity;
import com.sleekbyte.tailor.format.Formatter;
import com.sleekbyte.tailor.utils.Configuration;
import java.io.FileNotFoundException;
import java.nio.file.InvalidPathException;
import java.nio.file.NoSuchFileException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Configuration_ESTest extends Configuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LL|";
      stringArray0[1] = "%zr{Hohke";
      stringArray0[2] = "resourcescomsleekbyte\tailorcommon\forced-type-cast.md.swift";
      stringArray0[3] = "ses.md";
      stringArray0[4] = "";
      stringArray0[5] = "com.sleekbyte.tailor.utils.Configuration";
      stringArray0[6] = "-l^/*63c!bWeULHJC>a";
      Configuration configuration0 = new Configuration(stringArray0);
      try { 
        configuration0.parseConstructLengths();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid value provided for integer argument max-line-length.
         //
         verifyException("com.sleekbyte.tailor.utils.CLIArgumentParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("O!^CiZ9)XX,u");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!1=3|g|J;t";
      stringArray0[1] = "S~~x#~}VQ Ko!zD*ox";
      stringArray0[2] = "com.sleekbyte.tailor.utils.Configuration";
      stringArray0[3] = "brace-style";
      stringArray0[4] = "O!^CiZ9)XX,u";
      stringArray0[5] = "/>";
      Configuration configuration0 = new Configuration(stringArray0);
      try { 
        configuration0.getFilesToAnalyze();
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Rw}Qqi%Y2!TA:z&i*k";
      stringArray0[2] = "K5PVKA8!%BdCuhJ$?~A";
      Configuration configuration0 = new Configuration(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Rw}Qqi%Y2!TA:z&i*k");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        configuration0.getFilesToAnalyze();
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "}^%x;VU";
      stringArray0[2] = "SRCROOT";
      stringArray0[3] = "max-closure-length";
      Configuration configuration0 = null;
      try {
        configuration0 = new Configuration(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // special characters are not allowed
         //
         verifyException("org.yaml.snakeyaml.reader.StreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\"<U");
      stringArray0[0] = "check_name";
      stringArray0[1] = "zuMR4gE}')+";
      stringArray0[2] = ":\"I'";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "'P;syCx*#nAy?$";
      Configuration configuration0 = null;
      try {
        configuration0 = new Configuration(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // while scanning a quoted scalar
         //  in 'reader', line 1, column 1:
         //     \"<U
         //     ^
         // found unexpected end of stream
         //  in 'reader', line 1, column 4:
         //     <U
         //       ^
         //
         verifyException("org.yaml.snakeyaml.scanner.ScannerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-21);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[0] = "aY`w&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "+";
      Configuration configuration0 = null;
      try {
        configuration0 = new Configuration(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.nio.charset.MalformedInputException: Input length = 1
         //
         verifyException("org.yaml.snakeyaml.reader.StreamReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "end";
      stringArray0[1] = "kRXsfCt8j{E-!";
      stringArray0[2] = "";
      stringArray0[3] = "-&fxbh9chE-j`1)Kl";
      Configuration configuration0 = null;
      try {
        configuration0 = new Configuration(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unrecognized option: -&fxbh9chE-j`1)Kl
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " rules";
      stringArray0[1] = "-=D\u0004$G3L:";
      Configuration configuration0 = null;
      try {
        configuration0 = new Configuration(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "n\"$E6\"D7lw;nR;JR~5K";
      stringArray0[1] = "";
      stringArray0[2] = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      stringArray0[3] = "com.sleekbyte.tailor.utils.Configuration$ConfigJSON";
      FileSystemHandling.createFolder(evoSuiteFile0);
      Configuration configuration0 = null;
      try {
        configuration0 = new Configuration(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Invalid number of files specified for purge.";
      stringArray0[1] = "resourcescomsleekbyte\tailorintegrationxcode_integrate.rb.swift";
      stringArray0[2] = "tax.md";
      stringArray0[3] = "com.sleekbyte.tailor.utils.Configuration$ConfigJSON";
      stringArray0[4] = "up`i{3d53r\"1";
      stringArray0[5] = "ate.rb";
      stringArray0[6] = "disable";
      stringArray0[7] = "";
      Configuration configuration0 = new Configuration(stringArray0);
      Set<String> set0 = configuration0.getFilesToAnalyze();
      assertFalse(set0.contains("resourcescomsleekbyte\tailorintegrationxcode_integrate.rb.swift"));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-f5+*";
      Configuration configuration0 = new Configuration(stringArray0);
      try { 
        configuration0.getFormatter((ColorSettings) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid value provided for option format. Options are <xcode|json|cc|html>.
         //
         verifyException("com.sleekbyte.tailor.utils.CLIArgumentParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Configuration configuration0 = new Configuration((String[]) null);
      Set<String> set0 = configuration0.getFilesToAnalyze();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Configuration configuration0 = new Configuration((String[]) null);
      Set<String> set0 = configuration0.getFilesToAnalyze();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Configuration configuration0 = new Configuration((String[]) null);
      Set<Rules> set0 = configuration0.getEnabledRules();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Configuration configuration0 = new Configuration((String[]) null);
      Set<Rules> set0 = configuration0.getEnabledRules();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Configuration configuration0 = new Configuration((String[]) null);
      boolean boolean1 = configuration0.debugFlagSet();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Configuration configuration0 = new Configuration((String[]) null);
      boolean boolean0 = configuration0.debugFlagSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Configuration configuration0 = new Configuration((String[]) null);
      boolean boolean0 = configuration0.shouldInvertColorOutput();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Configuration configuration0 = new Configuration((String[]) null);
      boolean boolean0 = configuration0.shouldInvertColorOutput();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Configuration configuration0 = new Configuration((String[]) null);
      boolean boolean0 = configuration0.shouldColorOutput();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Configuration configuration0 = new Configuration((String[]) null);
      boolean boolean0 = configuration0.shouldColorOutput();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Configuration configuration0 = new Configuration((String[]) null);
      int int0 = configuration0.numberOfFilesBeforePurge();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Configuration configuration0 = new Configuration((String[]) null);
      int int0 = configuration0.numberOfFilesBeforePurge();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".tailor.yml");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Configuration configuration0 = new Configuration((String[]) null);
      boolean boolean0 = configuration0.shouldClearDFAs();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "should start with whitespace";
      stringArray0[1] = "resourcescomsleekbyte\tailorintegrationxcode_integrate.rb.swift";
      stringArray0[2] = "should start with whitespace";
      stringArray0[3] = "resourcescomsleekbyte\tailorintegrationxcode_integrate.rb.swift";
      stringArray0[4] = "should start with whitespace";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "resourcescomsleekbyte\tailorintegrationxcode_integrate.rb.swift";
      Configuration configuration0 = new Configuration(stringArray0);
      boolean boolean0 = configuration0.shouldClearDFAs();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "fK~p<=pYFO/T72";
      stringArray0[2] = "UN}IB&3k8.swift";
      stringArray0[3] = "";
      stringArray0[4] = "com.sleekbyte.tailor.utils.CLIArgumentParser$CLIArgumentParserException";
      Configuration configuration0 = new Configuration(stringArray0);
      String string0 = configuration0.getXcodeprojPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Rw}Qqi%Y2!TA:z&i*k";
      stringArray0[2] = "K5PVKA8!%BdCuhJ$?~A";
      Configuration configuration0 = new Configuration(stringArray0);
      ConstructLengths constructLengths0 = configuration0.parseConstructLengths();
      assertEquals(0, constructLengths0.maxNameLength);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "fK~p<=pYFO/T72";
      stringArray0[2] = "UN}IB&3k8.swift";
      stringArray0[3] = "";
      stringArray0[4] = "com.sleekbyte.tailor.utils.CLIArgumentParser$CLIArgumentParserException";
      Configuration configuration0 = new Configuration(stringArray0);
      boolean boolean0 = configuration0.shouldPrintHelp();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "fK~p<=pYFO/T72";
      stringArray0[2] = "UN}IB&3k8.swift";
      stringArray0[3] = "";
      stringArray0[4] = "com.sleekbyte.tailor.utils.CLIArgumentParser$CLIArgumentParserException";
      Configuration configuration0 = new Configuration(stringArray0);
      Severity severity0 = configuration0.getMaxSeverity();
      assertEquals(Severity.WARNING, severity0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "fK~p<=pYFO/T72";
      stringArray0[2] = "UN}IB&3k8.swift";
      stringArray0[3] = "";
      stringArray0[4] = "com.sleekbyte.tailor.utils.CLIArgumentParser$CLIArgumentParserException";
      Configuration configuration0 = new Configuration(stringArray0);
      boolean boolean0 = configuration0.shouldPrintRules();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "fK~p<=pYFO/T72";
      stringArray0[2] = "UN}IB&3k8.swift";
      stringArray0[3] = "";
      stringArray0[4] = "com.sleekbyte.tailor.utils.CLIArgumentParser$CLIArgumentParserException";
      Configuration configuration0 = new Configuration(stringArray0);
      boolean boolean0 = configuration0.shouldPrintVersion();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "fK~p<=pYFO/T72";
      stringArray0[2] = "UN}IB&3k8.swift";
      stringArray0[3] = "";
      stringArray0[4] = "com.sleekbyte.tailor.utils.CLIArgumentParser$CLIArgumentParserException";
      Configuration configuration0 = new Configuration(stringArray0);
      boolean boolean0 = configuration0.shouldListFiles();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "should start with whitespace";
      stringArray0[1] = "resourcescomsleekbyte\tailorintegrationxcode_integrate.rb.swift";
      stringArray0[2] = "should start with whitespace";
      stringArray0[3] = "resourcescomsleekbyte\tailorintegrationxcode_integrate.rb.swift";
      stringArray0[4] = "should start with whitespace";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "resourcescomsleekbyte\tailorintegrationxcode_integrate.rb.swift";
      Configuration configuration0 = new Configuration(stringArray0);
      ColorSettings colorSettings0 = new ColorSettings(true, true);
      Formatter formatter0 = configuration0.getFormatter(colorSettings0);
      assertNotNull(formatter0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Configuration configuration0 = null;
      try {
        configuration0 = new Configuration(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
