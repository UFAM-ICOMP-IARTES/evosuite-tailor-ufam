/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 15:25:09 GMT 2024
 */

package com.sleekbyte.tailor.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sleekbyte.tailor.common.Severity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Severity_ESTest extends Severity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Severity severity0 = Severity.ERROR;
      Severity severity1 = Severity.min(severity0, severity0);
      assertEquals(Severity.ERROR, severity1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Severity severity0 = Severity.ERROR;
      Severity severity1 = Severity.WARNING;
      Severity severity2 = Severity.min(severity0, severity1);
      assertEquals(Severity.WARNING, severity2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Severity[] severityArray0 = Severity.values();
      assertEquals(2, severityArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Severity severity0 = Severity.valueOf("ERROR");
      assertEquals("error", severity0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Severity.parseSeverity((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Severity.min((Severity) null, (Severity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sleekbyte.tailor.common.Severity", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Severity.IllegalSeverityException severity_IllegalSeverityException0 = new Severity.IllegalSeverityException();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Severity severity0 = Severity.WARNING;
      Severity severity1 = Severity.ERROR;
      Severity severity2 = Severity.min(severity0, severity1);
      assertEquals(Severity.WARNING, severity2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Severity severity0 = Severity.parseSeverity("WARNING");
      assertEquals(Severity.WARNING, severity0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Severity severity0 = Severity.parseSeverity("error");
      assertEquals(Severity.ERROR, severity0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Severity severity0 = Severity.WARNING;
      Severity severity1 = Severity.min(severity0, severity0);
      String string0 = severity1.toString();
      assertEquals("warning", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        Severity.parseSeverity("8<doDl1]rD}hnV\" ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.sleekbyte.tailor.common.Severity", e);
      }
  }
}
