/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 15:22:52 GMT 2024
 */

package com.sleekbyte.tailor.common;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sleekbyte.tailor.common.Rules;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rules_ESTest extends Rules_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Rules[] rulesArray0 = Rules.values();
      assertEquals(30, rulesArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Rules rules0 = Rules.valueOf("MULTIPLE_IMPORTS");
      assertEquals("Multiple import statements should not be defined on a single line.", rules0.getDescription());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Rules rules0 = Rules.PARENTHESIS_WHITESPACE;
      String string0 = rules0.getExamples();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Rules rules0 = Rules.PARENTHESIS_WHITESPACE;
      String string0 = rules0.getName();
      assertEquals("parenthesis-whitespace", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Rules rules0 = Rules.COMMENT_WHITESPACE;
      int int0 = rules0.getRemediationPoints();
      assertEquals(50000, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Rules rules0 = Rules.COMMENT_WHITESPACE;
      String string0 = rules0.getExamples();
      assertEquals("### [comment-whitespace](https://github.com/sleekbyte/tailor/issues/89)\n\nPrefer _at least one_ whitespace character after a comment opening symbol (`//`, `///`, `/*`, or `/**`) and _at least one_ whitespace character before a comment closing symbol (`*/`).\n\n*Preferred*\n\n```\n// This is a comment\n\n/// This is a documentation comment\n\n/* This is a\nmulti-line comment */\n\n/* This is a\nmulti-line comment\n*/\n\n/** This is a\ndocumentation multi-line\ncomment\n*/\n```\n\n*Not Preferred*\n\n```\n//This is a comment\n\n///This is a documentation comment\n\n/*This is a\nmulti-line comment*/\n\n/**This is a multi-line\ndocumentation comment */\n```\n", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Rules rules0 = Rules.COMMENT_WHITESPACE;
      String string0 = rules0.getLink();
      assertEquals("https://github.com/sleekbyte/tailor/wiki/Rules#comment-whitespace", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Rules rules0 = Rules.COMMENT_WHITESPACE;
      String string0 = rules0.getCategory();
      assertEquals("Style", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Rules rules0 = Rules.COMMENT_WHITESPACE;
      String string0 = rules0.getDescription();
      assertEquals("Ensure at least one whitespace character after a comment opening symbol (// or /*) and at least one whitespace character before a comment closing symbol (*/).", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Rules rules0 = Rules.COMMENT_WHITESPACE;
      String string0 = rules0.getClassName();
      assertEquals("com.sleekbyte.tailor.listeners.whitespace.CommentWhitespaceListener", string0);
  }
}
