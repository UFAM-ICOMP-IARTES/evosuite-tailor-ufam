/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 15:20:32 GMT 2024
 */

package com.sleekbyte.tailor.common;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sleekbyte.tailor.common.RuleExamples;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RuleExamples_ESTest extends RuleExamples_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = RuleExamples.get("### [leading-whitespace](https://github.com/sleekbyte/tailor/issues/115)\nVerify that source files begin with a non-whitespace character.\n\n*Preferred*\n\n```\n1 import Foundation\n```\n\n*Not Preferred*\n\n```\n1 \u00C2\u00AC\n2 import Foundation\n```\n\n```\n1 \u00E2\u20AC\u00A2\u00E2\u20AC\u00A2import Foundation\n```\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = RuleExamples.get("forced-type-cast");
      assertEquals("### [forced-type-cast](https://github.com/sleekbyte/tailor/issues/114)\nAvoid using the forced form of the type cast operator (`as!`) because Swift is not able to determine at compile time if the type conversion will succeed.  In the event of an unsuccessful conversion, a runtime error will be triggered. The conditional form of the type cast operator (`as?`) is safer and should be used when possible.\n\n*Preferred*\n\n```\nif let movie = item as? Movie {\n    print(\"Movie: '\\(movie.name)', dir. \\(movie.director)\")\n}\n```\n\n*Not Preferred*\n\n```\nlet movie = item as! Movie\nprint(\"Movie: '\\(movie.name)', dir. \\(movie.director)\")\n```\n", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RuleExamples ruleExamples0 = new RuleExamples();
  }
}
